{"version":3,"sources":["../src/index.js"],"names":["require","config","port","process","env","PORT","MongoClient","connect","MONGODB_URI","useNewUrlParser","err","console","error","stack","exit","then","client","DataDAO","injectDB","StockDataDAO","app","listen","log"],"mappings":";;;;;;;;AAkBA;;AACA;;AAIA;;AAvBA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAKAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAGA;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC,C,CAEA;;AAEAC,qBAAYC,OAAZ,CAAoBJ,OAAO,CAACC,GAAR,CAAYI,WAAhC,EAA6C;AAC5C;AACA;AACAC,EAAAA,eAAe,EAAE,IAH2B,CAI5C;;AAJ4C,CAA7C,WAMQ,UAAAC,GAAG,EAAI;AACbC,EAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,KAAlB,EAAyB,kBAAzB;AACAV,EAAAA,OAAO,CAACW,IAAR,CAAa,CAAb;AACA,CATF,EAUEC,IAVF;AAAA,2FAUO,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAECC,iBAAQC,QAAR,CAAiBF,MAAjB,CAFD;;AAAA;AAAA;AAAA,mBAGCG,sBAAaD,QAAb,CAAsBF,MAAtB,CAHD;;AAAA;AAKL;AAEAI,+BAAIC,MAAJ,CAAWnB,IAAX,EAAiB,YAAM;AACtBS,cAAAA,OAAO,CAACW,GAAR,6BAAiCpB,IAAjC;AACA,aAFD,EAPK,CAUL;;;AAVK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAVP;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// require('dotenv').config();\n\n// import express from 'express';\n\n// const app = express();\n\n// app.get('/', (req, res) => {\n// \tres.status(200).json({message: 'Welcome to Node.js & Express'});\n// });\n\n// const port = process.env.PORT || 8000;\n\n// app.listen(port, () => {\n// \tconsole.log(`App is running on port ${port}`);\n// });\n\n// import 'core-js';\n\nimport app from './server';\nimport {MongoClient} from 'mongodb';\n\nrequire('dotenv').config();\n\nimport {DataDAO, StockDataDAO} from './dao/dataDAO';\n// import DataCtrl from './api/data.controller';\n\nconst port = process.env.PORT || 8000;\n\n// console.log('running', process.env.MONGODB_URI);\n\nMongoClient.connect(process.env.MONGODB_URI, {\n\t// wtimeout: 25000,\n\t// poolSize: 50,\n\tuseNewUrlParser: true,\n\t// useUnifiedTopology: true,\n})\n\t.catch(err => {\n\t\tconsole.error(err.stack, '-----error stack');\n\t\tprocess.exit(1);\n\t})\n\t.then(async client => {\n\t\t// console.log(client);\n\t\tawait DataDAO.injectDB(client);\n\t\tawait StockDataDAO.injectDB(client);\n\n\t\t// DataCtrl.apiGetStockData();\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`listening on port ${port}`);\n\t\t});\n\t\t// console.log(`listening on port ${port}`);\n\t});\n"],"file":"index.js"}