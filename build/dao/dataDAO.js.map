{"version":3,"sources":["../../src/dao/dataDAO.js"],"names":["zips","stocks","DataDAO","conn","db","process","env","MFLIX_TR","collection","console","log","error","filters","page","zipsPerPage","queryParams","find","state","cursor","zipsList","totalNumZips","displayCursor","skip","limit","toArray","countDocuments","StockDataDAO","pricesPerPage","pricesList","totalNumPrices","ticker","myDate","Date","updateOne","timestamp","$set","open","high","low","close","upsert","upsertResult","success"],"mappings":"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","sourcesContent":["let zips, stocks;\n\nexport class DataDAO {\n\tstatic async injectDB(conn) {\n\t\tif (zips) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\t// movies = await conn.db(process.env.MFLIX_NS).collection('movies');\n\t\t\tzips = await conn.db(process.env.MFLIX_TR).collection('zips');\n\t\t\t// zips = await conn.db(process.env.MFLIX_TR).collection('movies');\n\t\t\t// console.log('zip', zips);\n\t\t\tconsole.log('zip inj');\n\t\t} catch (e) {\n\t\t\tconsole.error(`Unable to establish collection handles in dataDAO: ${e}`);\n\t\t}\n\t}\n\n\tstatic async getZips({\n\t\t// here's where the default parameters are set for the getMovies method\n\t\tfilters = null,\n\t\tpage = 0,\n\t\tzipsPerPage = 20,\n\t} = {}) {\n\t\tlet queryParams = {};\n\t\t// if (filters) {\n\t\t// \tif ('text' in filters) {\n\t\t// \t\tqueryParams = this.textSearchQuery(filters['text']);\n\t\t// \t} else if ('cast' in filters) {\n\t\t// \t\tqueryParams = this.castSearchQuery(filters['cast']);\n\t\t// \t} else if ('genre' in filters) {\n\t\t// \t\tqueryParams = this.genreSearchQuery(filters['genre']);\n\t\t// \t}\n\t\t// }\n\n\t\t// let { query = {}, project = {}, sort = DEFAULT_SORT } = queryParams;\n\t\tlet cursor;\n\n\t\t// const resa = await zips.find({state: 'AL'});\n\n\t\t// const res = await resa.toArray();\n\t\t// console.log('running getzips', res, '-----');\n\t\ttry {\n\t\t\tcursor = await zips.find({state: 'AL'});\n\n\t\t\t// console.log(cursor.toArray());\n\t\t\t// .project(project)\n\t\t\t// .sort(sort);\n\t\t} catch (e) {\n\t\t\tconsole.error(`Unable to issue find command, ${e}`);\n\t\t\treturn {zipsList: [], totalNumZips: 0};\n\t\t}\n\n\t\t// const zipsList = await cursor.toArray();\n\t\t// return {zipsList};\n\n\t\tconst displayCursor = cursor.skip(zipsPerPage * page).limit(zipsPerPage);\n\n\t\t// const zipsList = await displayCursor.toArray();\n\t\t// return {zipsList};\n\n\t\ttry {\n\t\t\tconst zipsList = await displayCursor.toArray();\n\t\t\t// const totalNumZips = page === 0 ? await zips.countDocuments(query) : 0;\n\t\t\tconst totalNumZips = page === 0 ? await zips.countDocuments({state: 'AL'}) : 0;\n\n\t\t\treturn {zipsList, totalNumZips};\n\t\t} catch (e) {\n\t\t\tconsole.error(\n\t\t\t\t`Unable to convert cursor to array or problem counting documents, ${e}`\n\t\t\t);\n\t\t\treturn {zipsList: [], totalNumZips: 0};\n\t\t}\n\t}\n}\n\nexport class StockDataDAO {\n\tstatic async injectDB(conn) {\n\t\tif (stocks) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\t// stocks = await conn.db(process.env.STOCK_DATA).collection('historical_prices');\n\t\t\tstocks = await conn.db('stock_data').collection('historical_prices');\n\t\t} catch (e) {\n\t\t\tconsole.error(`Unable to establish collection handles in dataDAO: ${e}`);\n\t\t}\n\t}\n\n\tstatic async getPrices({\n\t\t// here's where the default parameters are set for the getMovies method\n\t\tfilters = null,\n\t\tpage = 0,\n\t\tpricesPerPage = 20,\n\t} = {}) {\n\t\tlet cursor;\n\n\t\ttry {\n\t\t\tcursor = await stocks.find();\n\n\t\t\t// console.log(cursor.toArray());\n\t\t\t// .project(project)\n\t\t\t// .sort(sort);\n\t\t} catch (e) {\n\t\t\tconsole.error(`Unable to issue find command, ${e}`);\n\t\t\treturn {pricesList: [], totalNumPrices: 0};\n\t\t}\n\n\t\t// const pricesList = await cursor.toArray();\n\t\t// return {pricesList};\n\n\t\tconst displayCursor = cursor.skip(pricesPerPage * page).limit(pricesPerPage);\n\n\t\t// const pricesList = await displayCursor.toArray();\n\t\t// return {pricesList};\n\n\t\ttry {\n\t\t\tconst pricesList = await displayCursor.toArray();\n\t\t\tconst totalNumPrices =\n\t\t\t\tpage === 0 ? await stocks.countDocuments({ticker: 'AAPL'}) : 0;\n\n\t\t\treturn {pricesList, totalNumPrices};\n\t\t} catch (e) {\n\t\t\tconsole.error(\n\t\t\t\t`Unable to convert cursor to array or problem counting documents, ${e}`\n\t\t\t);\n\t\t\treturn {pricesList: [], totalNumPrices: 0};\n\t\t}\n\t}\n\n\tstatic async insertStockHist() {\n\t\t// var myDate = new Date(2014, 11, 12, 0, 0);\n\t\tvar myDate = new Date('10/16/1995Z');\n\n\t\ttry {\n\t\t\tlet upsertResult = await stocks.updateOne(\n\t\t\t\t// this is the \"query\" portion of the update\n\t\t\t\t{ticker: 'AAPL', timestamp: myDate},\n\t\t\t\t// this is the update\n\t\t\t\t{\n\t\t\t\t\t$set: {\n\t\t\t\t\t\t// timestamp: new Date(),\n\t\t\t\t\t\ttimestamp: myDate,\n\t\t\t\t\t\topen: 154.1,\n\t\t\t\t\t\thigh: 164.1,\n\t\t\t\t\t\tlow: 124.1,\n\t\t\t\t\t\tclose: 134.1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t// this is the options document. We've specified upsert: true, so if the\n\t\t\t\t// query doesn't find a document to update, it will be written instead as\n\t\t\t\t// a new document\n\t\t\t\t{upsert: true}\n\t\t\t);\n\n\t\t\t// console.log({upsertResult});\n\n\t\t\treturn {success: true};\n\t\t} catch (e) {\n\t\t\tconsole.error(`Error occurred while updating stock, ${e}`);\n\t\t\treturn {error: e};\n\t\t}\n\t}\n}\n"],"file":"dataDAO.js"}